/**
 * @packageDocumentation
 * @module api.functional.products
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { PaginatedResponse } from "./../../interface/common/pagination.interface";
import type { IProduct } from "./../../interface/product/schema.interface";

/**
 * 상품 목록 조회 API
 * 
 * 전체 상품 목록 조회
 * 
 * 나중에 필터링 기준, 정렬 기준 추가할 것
 * 
 * @tag product
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param page 페이지 정보, default 1
 * @returns 페이지 정보와 함께 요청한 상품 목록
 * 
 * @controller ProductsController.findMany()
 * @path GET /products
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function findMany
    (
        connection: IConnection,
        page?: number | undefined
    ): Promise<findMany.Output>
{
    return Fetcher.fetch
    (
        connection,
        findMany.ENCRYPTED,
        findMany.METHOD,
        findMany.path(page)
    );
}
export namespace findMany
{
    export type Output = PaginatedResponse<IProduct.Summary>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/products";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(page: number | undefined): string
    {
        const variables: Record<any, any> = 
        {
            page
        } as any;
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) delete variables[key];
        const encoded: string = new URLSearchParams(variables).toString();
        return `/products${encoded.length ? `?${encoded}` : ""}`;;
    }
}

/**
 * 상품 상세 조회 API
 * 
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param product_id 대상 상품 고유 번호
 * 
 * @controller ProductsController.findOne()
 * @path GET /products/:product_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function findOne
    (
        connection: IConnection,
        product_id: string
    ): Promise<findOne.Output>
{
    return Fetcher.fetch
    (
        connection,
        findOne.ENCRYPTED,
        findOne.METHOD,
        findOne.path(product_id)
    );
}
export namespace findOne
{
    export type Output = IProduct.Detail;

    export const METHOD = "GET" as const;
    export const PATH: string = "/products/:product_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(product_id: string): string
    {
        return `/products/${encodeURIComponent(product_id)}`;
    }
}

/**
 * 상품 생성 요청 API
 * 
 * @tag product
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 상품 생성 정보
 * 
 * @controller ProductsController.create()
 * @path POST /products
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function create
    (
        connection: IConnection,
        body: IProduct.CreateBody
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        create.ENCRYPTED,
        create.METHOD,
        create.path(),
        body,
        create.stringify
    );
}
export namespace create
{
    export type Input = IProduct.CreateBody;

    export const METHOD = "POST" as const;
    export const PATH: string = "/products";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/products`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}

/**
 * 상품 수정 요청 API
 * 
 * @tag product
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param product_id 대상 상품 고유 번호
 * @param body 변경할 상품 정보
 * 
 * @controller ProductsController.update()
 * @path PATCH /products/:product_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function update
    (
        connection: IConnection,
        product_id: string,
        body: IProduct.UpdateInput
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        update.ENCRYPTED,
        update.METHOD,
        update.path(product_id),
        body,
        update.stringify
    );
}
export namespace update
{
    export type Input = IProduct.UpdateInput;

    export const METHOD = "PATCH" as const;
    export const PATH: string = "/products/:product_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(product_id: string): string
    {
        return `/products/${encodeURIComponent(product_id)}`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}

/**
 * 상품 삭제(비활성화) 요청 API
 * 
 * @tag product
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param product_id 대상 상품 고유 번호
 * 
 * @controller ProductsController.inActivate()
 * @path DELETE /products/:product_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function inActivate
    (
        connection: IConnection,
        product_id: string
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        inActivate.ENCRYPTED,
        inActivate.METHOD,
        inActivate.path(product_id)
    );
}
export namespace inActivate
{

    export const METHOD = "DELETE" as const;
    export const PATH: string = "/products/:product_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(product_id: string): string
    {
        return `/products/${encodeURIComponent(product_id)}`;
    }
}