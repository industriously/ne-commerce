/**
 * @packageDocumentation
 * @module api.functional.user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { TryCatch } from "./../../interface/common/function.interface";
import type { IUser } from "./../../interface/user/user.interface";

/**
 * @summary 내 상세 정보 보기 API
 * @tag user
 * @returns 사용자 상세 정보
 * @throw 4006 사용자를 찾을 수 없습니다.
 * @throw 4007 잘못된 토큰입니다.
 * 
 * @controller UserController.getDetail()
 * @path GET /user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function getDetail
    (
        connection: IConnection
    ): Promise<getDetail.Output>
{
    return Fetcher.fetch
    (
        connection,
        getDetail.ENCRYPTED,
        getDetail.METHOD,
        getDetail.path()
    );
}
export namespace getDetail
{
    export type Output = TryCatch<IUser.Detail, { readonly code: "4006"; readonly data: "사용자를 찾을 수 없습니다."; } | { readonly code: "4007"; readonly data: "잘못된 토큰입니다."; }>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/user";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/user`;
    }
}

/**
 * @summary 내 정보 수정 API
 * @tag user
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 수정할 정보를 포함합니다.
 * @returns 수정된 상세 정보
 * @throw 4001 유효하지 않은 body입니다.
 * @throw 4006 사용자를 찾을 수 없습니다.
 * @throw 4007 잘못된 토큰입니다.
 * 
 * @controller UserController.update()
 * @path PATCH /user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function update
    (
        connection: IConnection,
        body: IUser.UpdateInput
    ): Promise<update.Output>
{
    return Fetcher.fetch
    (
        connection,
        update.ENCRYPTED,
        update.METHOD,
        update.path(),
        body,
        update.stringify
    );
}
export namespace update
{
    export type Input = IUser.UpdateInput;
    export type Output = TryCatch<IUser.Detail, { readonly code: "4001"; readonly data: "유효하지 않은 body입니다."; } | { readonly code: "4006"; readonly data: "사용자를 찾을 수 없습니다."; } | { readonly code: "4007"; readonly data: "잘못된 토큰입니다."; }>;

    export const METHOD = "PATCH" as const;
    export const PATH: string = "/user";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/user`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}

/**
 * 사용자는 로그인을 통해 계정을 활성화할 수 있습니다.
 * 
 * 비활성화된 계정은 조회되지 않습니다.
 * 
 * @summary 내 계정 비활성화 API
 * @tag user
 * @returns null
 * @throw 4006 사용자를 찾을 수 없습니다.
 * @throw 4007 잘못된 토큰입니다.
 * 
 * @controller UserController.inActivate()
 * @path DELETE /user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function inActivate
    (
        connection: IConnection
    ): Promise<inActivate.Output>
{
    return Fetcher.fetch
    (
        connection,
        inActivate.ENCRYPTED,
        inActivate.METHOD,
        inActivate.path()
    );
}
export namespace inActivate
{
    export type Output = TryCatch<null, { readonly code: "4006"; readonly data: "사용자를 찾을 수 없습니다."; } | { readonly code: "4007"; readonly data: "잘못된 토큰입니다."; }>;

    export const METHOD = "DELETE" as const;
    export const PATH: string = "/user";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/user`;
    }
}