/**
 * @packageDocumentation
 * @module api.functional.orders.payment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IOrder, IPaidOrder } from "./../../../interface/order/order.interface";
import type { TryCatch, IFailure } from "./../../../interface/common/exception.interface";

/**
 * 외부 결제 서비스와 연동하여 결제 완료를 확인하고 그에 따라 주문 정보를 갱신한다.
 * 
 * @summary 결제 확인 API
 * @tag orders
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param order_id 주문 번호
 * @param body 주문 번호와 결제 서비스 고유 번호
 * @returns 주문 상세 정보
 * 
 * @controller OrdersController.comfirm()
 * @path POST /orders/:order_id/payment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function comfirm
    (
        connection: IConnection,
        order_id: string,
        body: IOrder.IPaymentConfirmBody
    ): Promise<comfirm.Output>
{
    return Fetcher.fetch
    (
        connection,
        comfirm.ENCRYPTED,
        comfirm.METHOD,
        comfirm.path(order_id),
        body,
        comfirm.stringify
    );
}
export namespace comfirm
{
    export type Input = IOrder.IPaymentConfirmBody;
    export type Output = TryCatch<IPaidOrder<"on hold" | "paid" | "processing" | "delivering" | "delivered">, IFailure.Business.Invalid | IFailure.Business.NotFound | IFailure.Business.Forbidden>;

    export const METHOD = "POST" as const;
    export const PATH: string = "/orders/:order_id/payment";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(order_id: string): string
    {
        return `/orders/${encodeURIComponent(order_id)}/payment`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}