/**
 * @packageDocumentation
 * @module api.functional.orders
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { Try, TryCatch, IFailure } from "./../../interface/common/exception.interface";
import type { PaginatedResponse } from "./../../interface/common/pagination.interface";
import type { IPaidOrder, IOrder, IUnpaidOrder } from "./../../interface/order/order.interface";

export * as payment from "./payment";

/**
 * @summary 주문 목록 조회 API
 * @tag orders
 * @returns 주문 정보 목록
 * 
 * @controller OrdersController.findMany()
 * @path GET /orders
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function findMany
    (
        connection: IConnection
    ): Promise<findMany.Output>
{
    return Fetcher.fetch
    (
        connection,
        findMany.ENCRYPTED,
        findMany.METHOD,
        findMany.path()
    );
}
export namespace findMany
{
    export type Output = Try<PaginatedResponse<IPaidOrder<"on hold" | "paid" | "processing" | "delivering" | "delivered">>>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/orders";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/orders`;
    }
}

/**
 * @summary 주문 생성 API
 * @tag orders
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 배송정보와 주문 상품 목록을 포함한다.
 * @returns 생성된 주문 정보
 * 
 * @controller OrdersController.create()
 * @path POST /orders
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function create
    (
        connection: IConnection,
        body: IOrder.ICreateBody
    ): Promise<create.Output>
{
    return Fetcher.fetch
    (
        connection,
        create.ENCRYPTED,
        create.METHOD,
        create.path(),
        body,
        create.stringify
    );
}
export namespace create
{
    export type Input = IOrder.ICreateBody;
    export type Output = TryCatch<IUnpaidOrder, IFailure.Business.Invalid>;

    export const METHOD = "POST" as const;
    export const PATH: string = "/orders";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/orders`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}

/**
 * @summary 단건 주문 조회 API
 * @tag orders
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param order_id 주문 번호
 * @returns 주문 정보
 * 
 * @controller OrdersController.findOne()
 * @path GET /orders/:order_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function findOne
    (
        connection: IConnection,
        order_id: string
    ): Promise<findOne.Output>
{
    return Fetcher.fetch
    (
        connection,
        findOne.ENCRYPTED,
        findOne.METHOD,
        findOne.path(order_id)
    );
}
export namespace findOne
{
    export type Output = TryCatch<IOrder, IFailure.Business.Invalid | IFailure.Business.NotFound | IFailure.Business.Forbidden>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/orders/:order_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(order_id: string): string
    {
        return `/orders/${encodeURIComponent(order_id)}`;
    }
}